// Generated by LiveScript 1.3.1
(function(){
  var ldLoader;
  ldLoader = function(opt){
    var this$ = this;
    opt == null && (opt = {});
    this.opt = import$({
      activeClass: 'running',
      baseZ: 10000,
      autoZ: true,
      className: '',
      atomic: false
    }, opt);
    ['root', 'container'].map(function(n){
      if (opt[n]) {
        return this$[n] = typeof opt[n] === 'string'
          ? document.querySelector(opt[n])
          : opt[n];
      }
    });
    if (!this.container) {
      this.container = this.root
        ? this.root.parentNode
        : document.body;
    }
    if (!this.root) {
      this.root = document.createElement("div");
      this.container.appendChild(this.root);
    }
    this.root.classList.add.apply(this.root.classList, (this.opt.className || '').split(' ').filter(function(it){
      return it;
    }));
    this.root.classList.remove(opt.activeClass);
    this.running = false;
    this.count = 0;
    return this;
  };
  ldLoader.prototype = import$(Object.create(Object.prototype), {
    on: function(delay){
      delay == null && (delay = 0);
      return this.toggle(true, delay);
    },
    off: function(delay, force){
      delay == null && (delay = 0);
      force == null && (force = false);
      return this.toggle(false, delay, force);
    },
    render: function(){
      var runid, _, ret, this$ = this;
      if (!(this.running && this.opt.ctrl && this.opt.ctrl.step)) {
        return this.render.runid = -1;
      }
      this.render.runid = runid = Math.random();
      this.render.start = 0;
      _ = function(t){
        if (!this$.render.start) {
          this$.render.start = t;
        }
        this$.opt.ctrl.step.call(this$.root, t - this$.render.start);
        if (this$.render.runid === runid) {
          return requestAnimationFrame(function(it){
            return _(it);
          });
        } else if (this$.opt.ctrl.done) {
          return this$.opt.ctrl.done.call(this$.root, t - this$.render.start);
        }
      };
      return ret = requestAnimationFrame(function(it){
        return _(it);
      });
    },
    toggle: function(v, delay, force){
      var d, running, z, ref$, idx, this$ = this;
      delay == null && (delay = 0);
      force == null && (force = false);
      if (delay) {
        return setTimeout(function(){
          return this$.toggle(v);
        }, delay);
      }
      d = !(v != null)
        ? this.root.classList.contains(this.opt.activeClass) ? -1 : 1
        : v
          ? 1
          : -1;
      this.count += d;
      if (!force && !this.opt.atomic && (this.count >= 2 || (this.count === 1 && d < 0))) {
        return;
      }
      this.root.classList[!(v != null)
        ? 'toggle'
        : v ? 'add' : 'remove'](this.opt.activeClass);
      this.running = running = this.root.classList.contains(this.opt.activeClass);
      if (!this.opt.autoZ) {
        return;
      }
      if (running) {
        this.root.style.zIndex = this.z = z = ((ref$ = ldLoader.zstack)[ref$.length - 1] || 0) + this.opt.baseZ;
        ldLoader.zstack.push(z);
      } else {
        if ((idx = ldLoader.zstack.indexOf(this.z)) < 0) {
          return;
        }
        this.root.style.zIndex = "";
        ldLoader.zstack.splice(idx, 1);
      }
      if (this.opt.ctrl) {
        return this.render();
      }
    }
  });
  import$(ldLoader, {
    zstack: []
  });
  return window.ldLoader = ldLoader;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}